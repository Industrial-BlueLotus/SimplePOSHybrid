@page "/home"
@layout MainLayout
@using SimplePOSHybrid.Data
@using SimplePOSHybrid.Models.PartnerMenu
@using SimplePOSHybrid.Models
@using SimplePOSHybrid.Components
@inject IDialogService DialogService
@inject BrowserService Service
@inject NavigationManager Navigation
@using System.Text.Json;

<MudLayout>
    <MudAppBar Style="background-color:#053B71;color:white" Fixed="false" Dense="false" DisableGutters="false" Class="pa-0">
        <MudGrid>
            <MudItem xs="1" Class="d-flex align-center justify-left">
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start"/>        
            </MudItem>
            <MudItem xs="5" Class="d-flex align-center justify-left pa-0">
                <MudText Class="ml-4" Style="font-weight:800;font-size:large">@UserCompany</MudText>
            </MudItem>
            <MudItem xs="4" Class="d-flex align-bottom justify-left">

            </MudItem>
            <MudItem xs="2" Class="d-flex align-bottom " >
                <MudGrid>
                    <MudItem xs="8" Style="align-items:center;justify-content:end;display:flex;">
                        <MudText>@UserName</MudText>
                    </MudItem>
                    <MudItem xs="4" >
                        <MudIconButton Icon="@Icons.Material.Filled.Logout" Style="color:white" Href="/" />
                    </MudItem>
                   
                </MudGrid>
                
            </MudItem>

        </MudGrid>
        @*<MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" />
        <MudText Class="ml-4" Style="font-weight:800;font-size:large">BLX Super Mart</MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.Logout" Style="color:white" Href="/" />*@
    </MudAppBar>
    <MudMainContent Class="pt-0 pb-0 pl-3 pr-3" Style="height:100%">

        <MudGrid Class="pt-3" Style="height:100%">

            <MudItem xs="6" Class="pa-0" Style="background-color:steelblue">
                <MudTabs Elevation="2" Rounded="true" PanelClass="pa-0" Class="pr-0" PrevIcon="@Icons.Material.Filled.SkipPrevious" NextIcon="@Icons.Material.Filled.SkipNext"
                         AlwaysShowScrollButtons="true" Color="@Color.Primary" Style="border:thin;border-color:darkgray;border-radius:10px">
                    @foreach (string category in tabscat)
                    {

                        <MudTabPanel Text=@category ToolTip="Choose a Category" OnClick="() => LoadItems(category)">
                            <div style="height:calc( 100vh - 120px  );width:100%;overflow-y: auto;overflow-x: hidden;padding: 20px">
                                <MudGrid>

                                    @foreach (var item in tabscatitm)
                                    {
                                        <MudItem xs="3" Class="pa-1">
                                            @if (@item.ItemImageUrl != null)
                                            {
                                                <CustomImage Src=@item.ItemImageUrl ShortName=@item.ItemShortName OptionalSalesPrice=@item.OptionalSalesPrice OnClick="@(() => Click(item))" />
                                            }
                                            else
                                            {
                                                <CustomerImageWh Src="./Img/white_box.png" ShortName=@item.ItemShortName OptionalSalesPrice=@item.OptionalSalesPrice OnClick="@(() => Click(item))" />

                                            }

                                        </MudItem>
                                    }

                                </MudGrid>
                            </div>
                        </MudTabPanel>

                    }
                </MudTabs>
            </MudItem>

            <MudItem xs="6" Class="pa-4">
                <div style="height:calc( 100vh - 80px  )">
                    <MudGrid>
                        <MudItem xs="2" Class="pt-2 pb-1"></MudItem>
                        <MudItem xs="6" Class="mt-2 pt-2 pb-1">
                            <MudSelect Dense="true" Margin="Margin.Dense" T="string" Label="Order Type" Variant="Variant.Outlined">
                                <MudSelectItem Value="@("Credit")" />
                                <MudSelectItem Value="@("Debit")" />
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="1" Class="mt-2 pt-2 pb-1">
                            <MudIconButton Icon="@Icons.Material.Filled.PersonAddAlt1" OnClick="OpenRegUser" aria-label="add user"></MudIconButton>
                        </MudItem>
                        <MudItem xs="3" Class="mt-2 pt-2 pb-1">
                            <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowDown" OnClick="OpenExtUsers" aria-label="users"></MudIconButton>
                        </MudItem>
                        <MudItem xs="12" Class="pt-2">
                            <div class="ma-0" style="height: calc( 100vh - 400px);overflow: auto">
                                @{
                                    for (int i = 0; i < orderitems.Count(); i++)
                                    {
                                        Console.WriteLine(i);
                                        orderitems[i].ID = i;

                                    }
                                }
                                @*<MudDataGrid Items="@Elements.ToList().Where(x=>x.isActive==1)" Hover="true" Striped="true" Dense="true">*@
                                <MudDataGrid Items="@OrderItemsState.ToList().Where(x=>x.isActive==1)" Hover="true" Striped="true" Dense="true">

                                    <Columns>
                                        <Column T="Menuitemlist" StickyLeft="true" Class="removeicon">
                                            <CellTemplate>
                                                <MudIconButton OnClick="@(() => ClickConfirmDelete(@context.Item))" Color="@Color.Default" Icon="@Icons.Material.Filled.Delete" />

                                                @*<MudIconButton OnClick="@(() => RemoveItem(@context.Item))" Color="@Color.Default" Icon="@Icons.Material.Filled.Delete" />*@
                                            </CellTemplate>
                                        </Column>
                                        <Column T="Menuitemlist" Field="ItemName" Title="Name" />
                                        <Column T="Menuitemlist" Field="qty" Title="Qty">
                                            <CellTemplate>

                                                <MudGrid Style="padding-left:unset;padding-right:unset">
                                                    <MudItem xs="3" Class="d-flex align-center justify-center ">
                                                        <MudIconButton Icon="@Icons.Material.Filled.AddCircle" Variant="Variant.Filled" Size="Size.Small" @onclick="(() => {context.Item.qty = context.Item.qty + 1;RecalculateTotal();})" />
                                                    </MudItem>
                                                    <MudItem xs="6" Class="d-flex align-center justify-center pa-2">
                                                        <MudNumericField @bind-Value="@context.Item.qty" Margin="Margin.Dense" Style="text-align:center" HideSpinButtons="true" Min="0"/>
                                                    </MudItem>
                                                    <MudItem xs="3" Class="d-flex align-center justify-center">
                                                        <MudIconButton Icon="@Icons.Material.Filled.RemoveCircle" Variant="Variant.Filled" Size="Size.Small" @onclick="(() => {context.Item.qty = context.Item.qty - 1; RecalculateTotal();})" />
                                                    </MudItem>
                                                </MudGrid>
                                            </CellTemplate>
                                        </Column>
                                        <Column T="Menuitemlist" Field="OptionalSalesPrice" Title="Price" CellStyle="text-align:right">
                                            <CellTemplate>
                                                <MudText Typo="Typo.subtitle1">@context.Item.OptionalSalesPrice.ToString("0.00")</MudText>
                                            </CellTemplate>
                                        </Column>
                                        <Column T="Menuitemlist" Title="%" CellStyle="text-align: right">
                                            <CellTemplate>
                                                <MudText @bind-Value="DiscountValue" Typo="Typo.body2">@context.Item.ID</MudText>
                                            </CellTemplate>
                                        </Column>
                                        <Column T="Menuitemlist" Title="Total" CellStyle="text-align: right">
                                            <CellTemplate>
                                                @{

                                                    var total = (context.Item.OptionalSalesPrice * context.Item.qty) * (1 - (DiscountValue / 100.00));
                                                    double truncatedtotal = Math.Round(total, 2);

                                                }
                                                <MudText Typo="Typo.body2">

                                                    @truncatedtotal.ToString("0.00")
                                                </MudText>
                                            </CellTemplate>
                                        </Column>
                                    </Columns>
                                </MudDataGrid>
                            </div>
                        </MudItem>
                        <MudItem xs="12" Class="pa-2">
                            <MudPaper Class="pa-4 ma-0" Outlined="true" Elevation="3" Style="background-color:#e6e6e6;border:none">
                                <MudGrid>
                                    <MudItem xs="12" Class="pt-1 pb-1 ma-0">
                                        <MudGrid>
                                            <MudItem xs="6" Class="d-flex align-center justify-left">
                                                <MudText Typo="Typo.caption" Style="font-weight:bold">Sub Total:</MudText>
                                            </MudItem>
                                            <MudItem xs="6" Class="d-flex align-center justify-end">

                                                <MudText Typo="Typo.caption" Style="font-weight:bold" @bind-Value="subtotal">Rs.@subtotal.ToString("0.00")</MudText>
                                            </MudItem>
                                        </MudGrid>
                                    </MudItem>
                                    <MudItem xs="12" Class="pt-0 pb-0 ma-0">
                                        <MudGrid>
                                            <MudItem xs="6" Class="d-flex align-center justify-left">
                                                <MudText Typo="Typo.caption" Style="font-weight:bold">Discount:</MudText>
                                            </MudItem>
                                            <MudItem xs="6" Class="d-flex align-center justify-end">
                                                <MudText Typo="Typo.caption" Style="font-weight:bold" @bind-Value="FinalDiscount">Rs.@FinalDiscount.ToString("0.00")</MudText>
                                            </MudItem>
                                        </MudGrid>
                                    </MudItem>
                                    <MudItem xs="12" Class="pb-1 pt-1 ma-0">
                                        <MudGrid>
                                            <MudItem xs="6" Class="d-flex align-center justify-left">
                                                <MudText Typo="Typo.caption" Style="font-weight:bold">Net Total:</MudText>

                                            </MudItem>
                                            <MudItem xs="6" Class="d-flex align-center justify-end">
                                                <MudText Typo="Typo.caption" Style="font-weight:bold" @bind-Value="NetTotal">Rs.@NetTotal.ToString("0.00")</MudText>
                                            </MudItem>
                                        </MudGrid>
                                    </MudItem>
                                </MudGrid>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12" Class="pr-2 pl-2 pt-0  pb-1">
                            <MudGrid Class="pr-2 pl-2 pt-0 pb-0">
                                <MudItem xs="4" Class="d-flex align-center justify-center py-4">
                                    <MudButton Variant="Variant.Filled" @onclick="@(() => ClickTotdiscount())" Class="pa-4" StartIcon="@Icons.Material.Filled.Percent" Style="background-color:#0866c4;color:white;width:80%" Size="Size.Large">Discount</MudButton>
                                </MudItem>
                                <MudItem xs="4" Class="d-flex align-center justify-center py-4">
                                    <MudButton Variant="Variant.Filled" @onclick="@(() => ClickRecall())" Class="pa-4" StartIcon="@Icons.Material.Filled.Autorenew" Style="background-color:#0866c4;color:white;width:80%" Size="Size.Large">Recall</MudButton>
                                </MudItem>
                                <MudItem xs="4" Class="d-flex align-center justify-center py-4">
                                    <MudButton Variant="Variant.Filled" @onclick="@(() => ClickReceipt())" Class="pa-4" StartIcon="@Icons.Material.Filled.ReceiptLong" Style="background-color:#0866c4;color:white;width:80%" Size="Size.Large">Receipt</MudButton>
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                        <MudItem xs="12" Class="pr-2 pl-2 pt-0  pb-1">
                            <MudGrid Class="pr-2 pl-2 pt-0 pb-0">
                                <MudItem xs="3" Class="d-flex align-center justify-end py-4">
                                    <MudButton Variant="Variant.Filled" @onclick="@(() => ClickPrevSale())" DisableElevation="true" Style="background-color:#053B71;color:white" Class="pa-4" Size="Size.Large">Void</MudButton>
                                </MudItem>
                                <MudItem xs="4" Class="d-flex align-center justify-start py-4">
                                    <MudButton Variant="Variant.Filled" DisableElevation="true" Style="background-color:#053B71;color:white;width:80%" Class="pa-4" Size="Size.Large">Hold Sale</MudButton>
                                </MudItem>
                                <MudItem xs="5" Class="d-flex align-center justify-center py-4">
                                    <MudButton Variant="Variant.Filled" @onclick="@(() => PrcdBtnClick())" DisableElevation="true" Style="background-color:#0b6413;color:white;width:100%" Class="pa-4" Size="Size.Large">Proceed to Pay</MudButton>
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                    </MudGrid>
                </div>
            </MudItem>

        </MudGrid>
    </MudMainContent>


</MudLayout>


@code {
    public decimal DecimalValue { get; set; } = 1;

    public double NetTotal { get; set; } = 0.00;

    public double DiscountValue { get; set; } = 1.00;

    public double FinalDiscountPer { get; set; } = 10.00;

    public double FinalDiscount { get; set; } = 0.00;

    public double subtotal { get; set; } = 0.00;

    public List<string> tabscat = new List<string> { };

    public List<Menuitemlist> tabscatitm = new List<Menuitemlist> { };

    private List<Menuitemlist> orderitems = new List<Menuitemlist> { };

    private List<Menuitemlist> OrderItemsState = new List<Menuitemlist> { };

    private IEnumerable<Menuitemlist> Elements = new List<Menuitemlist>();

    public string cate = "chicken 23";

    public ItemModel test;

    public string UserName { get; set; } = "Username";

    public string UserCompany { get; set; } = "Company";

    public async void Load()
    {
        
        
        UserName = _loginState.GetUserName();
        Console.WriteLine(UserName);
        //UserCompany = loginResModel.ResponseData.User.UserCompanies[0].CompanyName;

        DashboardView dashboard = new DashboardView();
        test = await dashboard.LoadResponse();

        tabscat = DashboardView.DisplayCat(test);
        tabscatitm = DashboardView.DisplayItem(test, cate);
        Console.WriteLine(tabscatitm);
        StateHasChanged();

    }

    protected override void OnInitialized()
    {
        Load();


    }

    public void LoadItems(string cate)
    {

        tabscatitm = DashboardView.DisplayItem(test, cate);
        StateHasChanged();

    }

    private async void ClickConfirmDelete(Menuitemlist x)
    {
        var parameters = new DialogParameters();
        parameters.Add("Elementpara", x);
        parameters.Add("TitleText", "ALERT!");
        parameters.Add("ContentText", "Do you need to remove the item");
        parameters.Add("ButtonText1", "Yes");
        parameters.Add("ButtonText2", "No");
        var dialog = DialogService.Show<ConfirmDelete>("Choose Confirm Delete", parameters);
        using var task = dialog.Result;
        var result = await task;
        if (!result.Cancelled)
        {
            RemoveItem(x);
        }
        StateHasChanged();
    }

    private void ClickReceipt()
    {
        var parameters = new DialogParameters();
        parameters.Add("ButtonText", "Close");
        DialogService.Show<Receipt>("Choose Receipt", parameters);
    }

    private void ClickTotdiscount()
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Please select a discount type.");
        parameters.Add("ButtonText1", "Set Discount");
        parameters.Add("ButtonText2", "Cancel Discount");
        DialogService.Show<Totdiscount>("Choose Total discount", parameters);
    }

    private void ClickRecall()
    {
        var parameters = new DialogParameters();
        parameters.Add("ButtonText3", "OK");
        parameters.Add("ButtonText2", "Cancel");
        parameters.Add("ButtonText1", "Assign Driver");
        DialogService.Show<Recall>("Choose Recall", parameters);
    }

    private void ClickPrevSale()
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Previous sales should be fetched from the backend and displayed here.");
        parameters.Add("ButtonText", "Close");

        DialogService.Show<PrevSale>("Choose PrevSale", parameters);
    }

    private void OpenExtUsers()
    {
        DialogService.Show<Dialog>("Choose Customer");

    }

    private void OpenRegUser()
    {
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };

        DialogService.Show<RegUser>("Add Customer", closeOnEscapeKey);
    }

    private void Click(Menuitemlist item)
    {
        OrderItemsState = _orderState.GetOrderitems();
        if ( OrderItemsState.Any(i =>i.ItemName == item.ItemName) )
        {
            item.qty += 1;

        }
        else
        {
            orderitems.Add(item);

        }

        _orderState.OrderMthd(orderitems);
        OrderItemsState = _orderState.GetOrderitems();
        //Elements = _orderState.GetElements();
        Console.WriteLine(OrderItemsState);
        RecalculateTotal();
        StateHasChanged();
    }

    void RecalculateTotal()
    {
        List<Menuitemlist> newState = OrderItemsState.Where(item => item.isActive == 1).ToList();

        subtotal = newState.Sum(item => item.OptionalSalesPrice);
        StateHasChanged();

        double totalre = 0.00;
        foreach (var it in newState)
        {
            totalre += (it.OptionalSalesPrice * it.qty) * (1 - (DiscountValue / 100.00));
            subtotal = Math.Round(totalre, 2);
        }


        FinalDiscount = subtotal * (FinalDiscountPer/100.00);
        FinalDiscount = Math.Round(FinalDiscount, 2);
        NetTotal = subtotal * (1-FinalDiscountPer/100.00);
        NetTotal = Math.Round(NetTotal, 2);


    }

    private void RemoveItem(Menuitemlist x)
    {
        x.isActive = 0;
        //orderitems = orderitems.Where(u => u.ID != x.ID).ToList();
        //_orderState.ElementMthd(orderitems);
        //Elements = _orderState.GetElements();
        RecalculateTotal();
        StateHasChanged();
    }

    public void PrcdBtnClick()
    {
        Navigation.NavigateTo("order");
    }
}